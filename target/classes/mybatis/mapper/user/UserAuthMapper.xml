<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hycxkj.user.mapper.UserAuthMapper">
  <resultMap id="BaseResultMap" type="com.hycxkj.user.bean.UserAuth">
    <result column="u_id" jdbcType="BIGINT" property="uId" />
    <result column="auth_id" jdbcType="BIGINT" property="authId" />
    <result column="auth_access_token" jdbcType="VARCHAR" property="authAccessToken" />
    <result column="auth_type" jdbcType="TINYINT" property="authType" />
    <result column="id" jdbcType="BIGINT" property="id" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    u_id, auth_id, auth_access_token, auth_type, id
  </sql>
  <select id="selectByExample" parameterType="com.hycxkj.user.bean.UserAuthExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_auth
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.hycxkj.user.bean.UserAuthExample">
    delete from user_auth
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hycxkj.user.bean.UserAuth">
    insert into user_auth (u_id, auth_id, auth_access_token, 
      auth_type, id)
    values (#{uId,jdbcType=BIGINT}, #{authId,jdbcType=BIGINT}, #{authAccessToken,jdbcType=VARCHAR}, 
      #{authType,jdbcType=TINYINT}, #{id,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.hycxkj.user.bean.UserAuth">
    insert into user_auth
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uId != null">
        u_id,
      </if>
      <if test="authId != null">
        auth_id,
      </if>
      <if test="authAccessToken != null">
        auth_access_token,
      </if>
      <if test="authType != null">
        auth_type,
      </if>
      <if test="id != null">
        id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uId != null">
        #{uId,jdbcType=BIGINT},
      </if>
      <if test="authId != null">
        #{authId,jdbcType=BIGINT},
      </if>
      <if test="authAccessToken != null">
        #{authAccessToken,jdbcType=VARCHAR},
      </if>
      <if test="authType != null">
        #{authType,jdbcType=TINYINT},
      </if>
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hycxkj.user.bean.UserAuthExample" resultType="java.lang.Long">
    select count(*) from user_auth
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_auth
    <set>
      <if test="record.uId != null">
        u_id = #{record.uId,jdbcType=BIGINT},
      </if>
      <if test="record.authId != null">
        auth_id = #{record.authId,jdbcType=BIGINT},
      </if>
      <if test="record.authAccessToken != null">
        auth_access_token = #{record.authAccessToken,jdbcType=VARCHAR},
      </if>
      <if test="record.authType != null">
        auth_type = #{record.authType,jdbcType=TINYINT},
      </if>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_auth
    set u_id = #{record.uId,jdbcType=BIGINT},
      auth_id = #{record.authId,jdbcType=BIGINT},
      auth_access_token = #{record.authAccessToken,jdbcType=VARCHAR},
      auth_type = #{record.authType,jdbcType=TINYINT},
      id = #{record.id,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
</mapper>